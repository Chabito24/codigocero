{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["// Escucha el evento que indica que el DOM ya fue cargado y es seguro manipularlo\r\ndocument.addEventListener('DOMContentLoaded', function(){ // Espera a que el HTML esté parseado antes de ejecutar JS que toca el DOM\r\n    navegacionFija() // Activa la lógica para fijar/desfijar el header según el scroll\r\n    crearGaleria() // Al estar listo el DOM, llama a la función que construye la galería\r\n    resaltarEnlace() // Inicia el observador para resaltar el enlace activo del menú según la sección visible\r\n    scrollNav() // Habilita el desplazamiento suave al hacer click en los enlaces del menú\r\n}) // Cierra el callback del evento DOMContentLoaded\r\n\r\nfunction navegacionFija() { // Define la función que controla si el header se vuelve fijo\r\n    const header = document.querySelector('.header') //selector de clase header\r\n    const sobreFestival = document.querySelector('.sobre-festival') //selector\r\n\r\n    document.addEventListener('scroll', function() { // Escucha el scroll de la página para evaluar la posición\r\n        if(sobreFestival.getBoundingClientRect().bottom < 1) { // Si la parte inferior de .sobre-festival salió de la ventana (arriba)\r\n            header.classList.add('fixed') // Añade la clase que fija el header\r\n        }else { // En caso contrario\r\n            header.classList.remove('fixed') // Quita la clase para que el header no esté fijo\r\n        }\r\n    }) // Cierra el listener de scroll\r\n        \r\n} // Cierra la función navegacionFija\r\n\r\n\r\nfunction crearGaleria() { // Define la función que genera dinámicamente las imágenes de la galería\r\n    const cantidadImagenes = 16 // Cantidad total de imágenes a insertar\r\n    const galeria = document.querySelector('.galeria-imagenes') // Selecciona el contenedor donde se insertarán las imágenes (clase .galeria-imagenes)\r\n\r\n    // Bucle para crear y agregar varias imágenes a la galería\r\n    for(let i = 1; i <= cantidadImagenes; i++) { // Inicializa i=1; ⚠️ OJO: la condición \"1 <= 16\" es SIEMPRE verdadera (bucle infinito). Debería ser \"i <= 16\".\r\n        const imagen = document.createElement('IMG') // Crea un elemento <img> (las etiquetas HTML no son sensibles a mayúsculas/minúsculas)\r\n        imagen.src = `src/img/gallery/full/${i}.jpg` // Define la ruta de la imagen usando plantillas: 1.jpg, 2.jpg, ... 16.jpg\r\n        imagen.alt = 'Imagen Galeria' // Texto alternativo para accesibilidad y cuando la imagen no se puede mostrar\r\n\r\n        //Event Handler - es el proceso de detectar y responder a una interaccion del usuario en este caso a un clik\r\n        imagen.onclick = function() { // Asigna una función que se ejecuta al hacer click en la imagen\r\n            mostrarImagen(i) // Llama a mostrarImagen pasando el índice para saber qué archivo abrir\r\n        } // Cierra la función asignada al evento onclick\r\n        \r\n        galeria.appendChild(imagen) // Inserta la imagen como hijo del contenedor de la galería\r\n    } // Cierra el for\r\n\r\n} // Cierra la función crearGaleria\r\n\r\nfunction mostrarImagen(i) { // Función que crea y muestra el modal con la imagen ampliada\r\n\r\n    const imagen = document.createElement('IMG') // Crea una etiqueta <img> para el modal\r\n    imagen.src = `src/img/gallery/full/${i}.jpg` // Apunta a la misma imagen pero para mostrarla en grande\r\n    imagen.alt = 'Imagen Galeria' // Texto alternativo para la imagen\r\n\r\n    //Generar Modal\r\n    const modal = document.createElement('DIV') // Crea el contenedor del modal\r\n    modal.classList.add('modal') // Agrega la clase para estilos de modal\r\n    modal.onclick = cerrarModal //no requiere funcion por que no le estamos pasando un parametro como a mostrarImagen, esto debido a que cuando muestro la imagen el parametro es I ya que tiene que saber cual es la imagen a a cual le estoy dando click pero para cerrar el modal es irrelevante, igual se le puede pasar el function sin asignarle el arguumento de \"i\" ya que no es necesario\r\n\r\n    //Botón de cerrar\r\n    const cerrarModalBtn = document.createElement('BUTTON') //crea elemento etiqueta HTML\r\n    cerrarModalBtn.textContent = 'X' //contenido\r\n    cerrarModalBtn.classList.add('btn-cerrar') //crea clase\r\n    cerrarModalBtn.onclick = cerrarModal //cierra el modal\r\n\r\n        modal.appendChild(imagen) //generamos a imagen que se esta tomando en la funcion anterior de function mostrarImagen(i)y la agregamos al modal\r\n        modal.appendChild(cerrarModalBtn) // Inserta el botón de cerrar dentro del modal\r\n\r\n    //Agregar al HTML\r\n    const body = document.querySelector('body') // Selecciona la etiqueta <body> para manipularla\r\n    body.classList.add('overflow-hidden') // Evita el scroll del body mientras el modal esté abierto\r\n    body.appendChild(modal) //inyecta un div al HTML al dar click en la imagen\r\n} // Cierra la función mostrarImagen\r\n\r\nfunction cerrarModal() { // Función que cierra (y remueve) el modal\r\n    const modal = document.querySelector('.modal') // Busca el modal actual en el DOM\r\n    modal.classList.add('fade-out') // Activa animación de salida si existe en CSS\r\n    setTimeout(()=> { // Programa la ejecución de un bloque después de 500 ms\r\n        modal?.remove() //valida si eiste el modal y en ese caso eliminalo\r\n        const body = document.querySelector('body') // Vuelve a seleccionar el body tras eliminar el modal\r\n        body.classList.remove('overflow-hidden') // Restaura el scroll del body\r\n    },500); //retrsa este codigo 500 milisegudos lo que es lo mismo que medio segundo\r\n    } // Cierra la función cerrarModal\r\n    \r\nfunction resaltarEnlace() { // Función que resalta en el menú el enlace de la sección visible\r\n    document.addEventListener('scroll', function() { // Escucha el scroll para calcular la sección activa\r\n        const sections = document.querySelectorAll('section'); // Obtiene todas las secciones del documento\r\n        const navLinks = document.querySelectorAll('.navegacion-principal a'); // Obtiene todos los enlaces del menú principal\r\n\r\n        let actual = ''; // Guarda el id de la sección actualmente activa\r\n        sections.forEach( section =>{ // Itera por cada sección para determinar cuál está en viewport\r\n            const sectionTop = section.offsetTop // Distancia desde el top del documento hasta la sección\r\n            const sectionHeight = section.clientHeight // Alto de la sección\r\n            if(window.scrollY >= (sectionTop - sectionHeight / 3)){ // Si el scroll pasó un umbral de la sección, la marca como actual\r\n                actual = section.id // Guarda el id de la sección visible\r\n            }\r\n        }) //iteramos sobre todas las secciones detectando cual es la que esta mas visible\r\n\r\n        navLinks.forEach(link => { // Recorre todos los enlaces de navegación\r\n            link.classList.remove('active') // Quita la clase active de todos para reiniciar estado\r\n            if(link.getAttribute('href') === '#' + actual ){ // Si el href del link coincide con la sección activa\r\n                link.classList.add('active') // Activa visualmente ese enlace\r\n            }\r\n        }) // Cierra el forEach de navLinks\r\n    }) // Cierra el listener de scroll\r\n} // Cierra la función resaltarEnlace\r\n\r\nfunction scrollNav() { // Función que aplica desplazamiento suave al hacer click en los enlaces del menú\r\n    const navLinks = document.querySelectorAll('.navegacion-principal a') // Selecciona todos los enlaces dentro de la navegación principal\r\n\r\n    navLinks.forEach( link => { // Itera sobre cada enlace para registrar el evento de click\r\n        link.addEventListener('click', e => { // Escucha clicks en el enlace\r\n            e.preventDefault() // Evita el salto inmediato por el ancla\r\n            const sectionScroll = e.currentTarget.getAttribute('href') // Lee el selector destino (ej. \"#galeria\")\r\n            const section = document.querySelector(sectionScroll) // Busca el elemento de destino por su id\r\n            section.scrollIntoView({behavior:'smooth'}) // Desplaza la página suavemente hasta la sección\r\n        }) // Cierra el callback del click\r\n    }) // Cierra el forEach de enlaces\r\n}//asigna el efecto cuando damos click a los enlaces"],"file":"app.js"}